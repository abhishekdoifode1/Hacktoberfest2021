# -*- coding: utf-8 -*-
"""COVID-DATA_ANALYSIS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CNXUwgIR9gJQeEnXN_EW2RysymqCYBtz
"""

import pandas as pd
import numpy as np

from bs4 import BeautifulSoup as soup
from datetime import date, datetime
from urllib.request import Request, urlopen

import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
import plotly.offline as py
import seaborn as sns
import gc
import warnings
warnings.filterwarnings("ignore")

from pandas_profiling import ProfileReport

"""*Web* Scrapping ofDATASET from worldometer.info

"""

today = datetime.now()
yesterday_data = "%s %d, %d" %(date.today().strftime('%b'), today.day-1, today.year)
yesterday_data

url = "https://www.worldometers.info/coronavirus/#countries"
req = Request(url, headers={'User-Agent':"Mozilla/5.0"})

webpage = urlopen(req)
page = soup(webpage, 'html.parser')

#page

table = page.findAll('table',{'id': 'main_table_countries_yesterday'})

containers = table[0].findAll('tr',{'style': ''})
title = containers[0]

del containers[0]

all_data = []
clean = True

for country in containers:
  country_data = []
  country_container = country.findAll('td')

  if country_container[1].text == 'china':
    continue
  for i in range(1, len(country_container)):
    final_feature = country_container[i].text
    if clean:
      if i!=1 and i!=len(country_container)-1:
        final_feature = final_feature.replace(",","")

        if final_feature.find('+') !=-1:
          final_feature = final_feature.replace("+", "")
          final_feature = float(final_feature)
        elif final_feature.find('-') !=-1:
          final_feature = final_feature_replace('-', '')
          final_feature = float(final_feature)*-1
      if final_feature =='N/A':
        final_feature =0
      elif final_feature =='' or final_feature== " ":
        final_feature = -1
      country_data.append(final_feature)
  
  all_data.append(country_data)

all_data

df = pd.DataFrame(all_data)
df.drop([15,16,17,18,19,20], inplace = True,axis =1)
df.head()

column_labels = ['Country','Total cases', 'New cases', 'Total Deaths', 'New Deaths', 'Total Recovered', 'New recovered', 'Active cases','Serious cases', 'Total cases/1M', 'Total deaths/1M', 'Total tests','Tests/1M', 'Population', 'Continents'] 
df.columns = column_labels
df.head()

for label in df.columns:
  if label !='Country' and label != 'Continents':
    df[label] = pd.to_numeric(df[label])

df['%inc new cases']=df['New cases']/df['Total cases']*100
df['%inc new deaths']=df['New Deaths']/df['Total Deaths']*100
df['%inc new recovered']=df['New recovered']/df['Total Recovered']*100

df.head()

"""Expolatory Data Analysis"""

cases = df[['Total Recovered','Active cases','Total Deaths']].loc[0]
cases_df = pd.DataFrame(cases).reset_index()
cases_df.columns = ["Type","Total"]

cases_df["Percentage"] = np.round(100*cases_df['Total']/np.sum(cases_df['Total']),2)
cases_df["Virus type"] = ["COVID-19" for i in range(len(cases_df))]

cases_df

fig = px.bar(cases_df,x ='Virus type', y = 'Percentage', color = 'Type', hover_data = ["Total"], width = 600)
fig.show()

cases = df[['New cases','New recovered','New Deaths']].loc[0]
cases_df = pd.DataFrame(cases).reset_index()
cases_df.columns = ["Type","Total"]

cases_df["Percentage"] = np.round(100*cases_df['Total']/np.sum(cases_df['Total']),2)
cases_df["Virus type"] = ["COVID-19" for i in range(len(cases_df))]

cases_df

fig = px.bar(cases_df,x ='Virus type', y = 'Percentage', color = 'Type', hover_data = ["Total"], width = 600)
fig.show()

per = np.round(df[["%inc new cases","%inc new deaths","%inc new recovered"]].loc[0],2)

per_df = pd.DataFrame(per)
per_df.columns = ['Percentage']
#per_df["Virus type"] = ["COVID-19" for i in range(len(cases_df))]
per_df

fig = go.Figure()
fig.add_trace(go.Bar(x = per_df.index, y = per_df['Percentage'], marker_color = ["Yellow", 'blue','red']))
fig.show()

"""Continents"""

continents_df = df.groupby("Continents").sum().drop("All")  #groupby - continents and sum the numerics and drop rest(String type)
continents_df = continents_df.reset_index()  #indexing
continents_df.head()

def continent_visulaization(v_list):
  for label in v_list:
    c_df = continents_df[['Continents',label]]
    c_df['Percentage'] = np.round(100*c_df[label]/np.sum(c_df[label]),2)
    c_df['Virus type'] = ["COVID-19" for i in range(len(c_df))]

    fig = px.bar(c_df,x ='Virus type', y = 'Percentage', color = 'Continents', hover_data = [label], width = 600)
    fig.update_layout(title = {"text" : label})
    fig.show()

cases_list = ['Total cases', 'Active cases','New cases','Serious cases','Total cases/1M']

deaths_list = ['Total Deaths','New Deaths','Total deaths/1M']

recovered_list = ['Total Recovered', 'New recovered', '%inc new recovered']

continent_visulaization(cases_list)
#continent_visulaization(deaths_list)
#continent_visulaization(recovered_list)

"""Countries"""

#df = df.drop([len(df)-1])
country_df = df.drop([0])

country_df.head()

country = country_df.columns[1:14]
look_At = 5
fig = go.Figure() #creating fig obj
c = 0
for i in country_df.index :
  if c < look_At:
    fig.add_trace(go.Bar(name = country_df['Country'][i], x = country, y = country_df.loc[i][1:14]))
  else:
    break
  c+=1

fig.update_layout(title = {'text' : f'Top {look_At} countries affected'}, yaxis_type = 'log')   # we see if we only take numeric data, then high value dominates the other. therefore we will take log values.(normalize)
fig.show()

